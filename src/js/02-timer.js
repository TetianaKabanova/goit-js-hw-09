import flatpickr from 'flatpickr';
import 'flatpickr/dist/flatpickr.min.css';
import Notiflix from 'notiflix';

const dateTimePicker = document.getElementById('datetime-picker');
const startBtn = document.querySelector('[data-start]');

const TIMER_DELAY = 1000;
let intervalId = null;
let selectedDate = null;
let currentDate = null;
startBtn.disabled = true;

Notiflix.Report.info(
  ' ‚úå –ü—Ä–∏–≤—ñ—Ç!',
  '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –¥–∞—Ç—É —ñ –Ω–∞—Ç–∏—Å–Ω–∏ —Å—Ç–∞—Ä—Ç',
  'Ok'
);

flatpickr(dateTimePicker, {
  enableTime: true,
  time_24hr: true,
  defaultDate: new Date(),
  minuteIncrement: 1,
  onClose(selectedDates) {
    if (selectedDates[0].getTime() < Date.now()) {
      Notiflix.Report.failure(
        '–£–ø—Å...ü§î',
        '–û–±–µ—Ä–∏ –¥–∞—Ç—É –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É',
        '–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑'
      );
    } else {
      Notiflix.Report.success(
        '–ß—É–¥–æ–≤–æ ü§ó',
        '–ù–∞—Ç–∏—Å–Ω–∏ Start, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏',
        'Start'
      );
      startBtn.disabled = false;
      const setTimer = () => {
        selectedDate = selectedDates[0].getTime();
        timer.start();
      };

      startBtn.addEventListener('click', setTimer);
    }
  },
});

const timer = {
  rootSelector: document.querySelector('.timer'),
  start() {
    intervalId = setInterval(() => {
      startBtn.disabled = true;
      dateTimePicker.disabled = true;
      currentDate = Date.now();
      const delta = selectedDate - currentDate;

      if (delta <= 0) {
        clearInterval(intervalId);
        Report.info(
          'üëè –¢–∞–π–º–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ!',
          '–Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ –∑–Ω–æ–≤—É —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –≤—ñ–¥–ª—ñ–∫, –æ–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –û–∫ –∞–±–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—Éüòâ',
          '–û–∫'
        );
        return;
      }
      const { days, hours, minutes, seconds } = this.convertMs(delta);
      this.rootSelector.querySelector('[data-days]').textContent =
        this.addLeadingZero(days);
      this.rootSelector.querySelector('[data-hours]').textContent =
        this.addLeadingZero(hours);
      this.rootSelector.querySelector('[data-minutes]').textContent =
        this.addLeadingZero(minutes);
      this.rootSelector.querySelector('[data-seconds]').textContent =
        this.addLeadingZero(seconds);
    }, TIMER_DELAY);
  },

  stop() {
    clearInterval(intervalId);
    this.intervalId = null;
    startBtn.disabled = true;
    dateTimePicker.disabled = false;
  },

  convertMs(ms) {
    const second = 1000;
    const minute = second * 60;
    const hour = minute * 60;
    const day = hour * 24;

    const days = this.addLeadingZero(Math.floor(ms / day));
    const hours = this.addLeadingZero(Math.floor((ms % day) / hour));
    const minutes = this.addLeadingZero(
      Math.floor(((ms % day) % hour) / minute)
    );
    const seconds = this.addLeadingZero(
      Math.floor((((ms % day) % hour) % minute) / second)
    );

    return { days, hours, minutes, seconds };
  },

  addLeadingZero(value) {
    return String(value).padStart(2, 0);
  },
};
